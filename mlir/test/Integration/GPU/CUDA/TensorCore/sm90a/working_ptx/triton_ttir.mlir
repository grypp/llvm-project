#loc1 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0)
module {
  tt.func public @matmul_kernel_0d1d2d3d4d5d6d7c8c9d10d11c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0)) {
    %c127_i32 = arith.constant 127 : i32 loc(#loc40)
    %c64_i32 = arith.constant 64 : i32 loc(#loc4)
    %c0_i32 = arith.constant 0 : i32 loc(#loc5)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x128xf32> loc(#loc6)
    %c1_i64 = arith.constant 1 : i64 loc(#loc5)
    %c128_i32 = arith.constant 128 : i32 loc(#loc7)
    %c8_i32 = arith.constant 8 : i32 loc(#loc8)
    %0 = tt.get_program_id {axis = 0 : i32} : i32 loc(#loc9)
    %1 = arith.addi %arg4, %c127_i32 : i32 loc(#loc40)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc41)
    %3 = arith.addi %arg3, %c127_i32 : i32 loc(#loc42)
    %4 = arith.divsi %3, %c128_i32 : i32 loc(#loc43)
    %5 = arith.muli %2, %c8_i32 : i32 loc(#loc8)
    %6 = arith.divsi %0, %5 : i32 loc(#loc12)
    %7 = arith.muli %6, %c8_i32 : i32 loc(#loc13)
    %8 = arith.subi %4, %7 : i32 loc(#loc14)
    %9 = arith.cmpi slt, %8, %c8_i32 : i32 loc(#loc44)
    %10 = arith.select %9, %8, %c8_i32 : i32 loc(#loc45)
    %11 = arith.remsi %0, %10 : i32 loc(#loc18)
    %12 = arith.addi %7, %11 : i32 loc(#loc19)
    %13 = arith.remsi %0, %5 : i32 loc(#loc20)
    %14 = arith.divsi %13, %10 : i32 loc(#loc21)
    %15 = arith.muli %12, %c128_i32 : i32 loc(#loc7)
    %16 = arith.muli %14, %c128_i32 : i32 loc(#loc22)
    %17 = arith.extsi %arg3 : i32 to i64 loc(#loc5)
    %18 = arith.extsi %arg5 : i32 to i64 loc(#loc5)
    %19 = arith.extsi %arg6 : i32 to i64 loc(#loc5)
    %20 = tt.make_tensor_ptr %arg0, [%17, %18], [%19, %c1_i64], [%15, %c0_i32] {order = array<i32: 1, 0>} : <tensor<128x64xf16>, 1> loc(#loc5)
    %21 = arith.extsi %arg4 : i32 to i64 loc(#loc23)
    %22 = arith.extsi %arg7 : i32 to i64 loc(#loc23)
    %23 = tt.make_tensor_ptr %arg1, [%18, %21], [%c1_i64, %22], [%c0_i32, %16] {order = array<i32: 0, 1>} : <tensor<64x128xf16>, 1> loc(#loc23)
    %24:3 = scf.for %arg9 = %c0_i32 to %arg5 step %c64_i32 iter_args(%arg10 = %cst, %arg11 = %20, %arg12 = %23) -> (tensor<128x128xf32>, !tt.ptr<tensor<128x64xf16>, 1>, !tt.ptr<tensor<64x128xf16>, 1>)  : i32 {
      %48 = tt.load %arg11 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : !tt.ptr<tensor<128x64xf16>, 1> -> tensor<128x64xf16> loc(#loc24)
      %49 = tt.load %arg12 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : !tt.ptr<tensor<64x128xf16>, 1> -> tensor<64x128xf16> loc(#loc25)
      %50 = tt.dot %48, %49, %arg10 {allowTF32 = true} : tensor<128x64xf16> * tensor<64x128xf16> -> tensor<128x128xf32> loc(#loc46)
      %51 = tt.advance %arg11, [%c0_i32, %c64_i32] : <tensor<128x64xf16>, 1> loc(#loc27)
      %52 = tt.advance %arg12, [%c64_i32, %c0_i32] : <tensor<64x128xf16>, 1> loc(#loc28)
      scf.yield %50, %51, %52 : tensor<128x128xf32>, !tt.ptr<tensor<128x64xf16>, 1>, !tt.ptr<tensor<64x128xf16>, 1> loc(#loc4)
    } loc(#loc4)
    %25 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc29)
    %26 = tt.splat %15 : (i32) -> tensor<128xi32> loc(#loc30)
    %27 = arith.addi %26, %25 : tensor<128xi32> loc(#loc30)
    %28 = tt.splat %16 : (i32) -> tensor<128xi32> loc(#loc31)
    %29 = arith.addi %28, %25 : tensor<128xi32> loc(#loc31)
    %30 = tt.expand_dims %27 {axis = 1 : i32} : (tensor<128xi32>) -> tensor<128x1xi32> loc(#loc32)
    %31 = tt.splat %arg8 : (i32) -> tensor<128x1xi32> loc(#loc32)
    %32 = arith.muli %30, %31 : tensor<128x1xi32> loc(#loc32)
    %33 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<128x1x!tt.ptr<f32, 1>> loc(#loc33)
    %34 = tt.addptr %33, %32 : tensor<128x1x!tt.ptr<f32, 1>>, tensor<128x1xi32> loc(#loc33)
    %35 = tt.expand_dims %29 {axis = 0 : i32} : (tensor<128xi32>) -> tensor<1x128xi32> loc(#loc34)
    %36 = tt.broadcast %34 : (tensor<128x1x!tt.ptr<f32, 1>>) -> tensor<128x128x!tt.ptr<f32, 1>> loc(#loc33)
    %37 = tt.broadcast %35 : (tensor<1x128xi32>) -> tensor<128x128xi32> loc(#loc33)
    %38 = tt.addptr %36, %37 : tensor<128x128x!tt.ptr<f32, 1>>, tensor<128x128xi32> loc(#loc33)
    %39 = tt.splat %arg3 : (i32) -> tensor<128xi32> loc(#loc35)
    %40 = arith.cmpi slt, %27, %39 : tensor<128xi32> loc(#loc35)
    %41 = tt.expand_dims %40 {axis = 1 : i32} : (tensor<128xi1>) -> tensor<128x1xi1> loc(#loc36)
    %42 = tt.splat %arg4 : (i32) -> tensor<128xi32> loc(#loc37)
    %43 = arith.cmpi slt, %29, %42 : tensor<128xi32> loc(#loc37)
    %44 = tt.expand_dims %43 {axis = 0 : i32} : (tensor<128xi1>) -> tensor<1x128xi1> loc(#loc38)
    %45 = tt.broadcast %41 : (tensor<128x1xi1>) -> tensor<128x128xi1> loc(#loc36)
    %46 = tt.broadcast %44 : (tensor<1x128xi1>) -> tensor<128x128xi1> loc(#loc36)
    %47 = arith.andi %45, %46 : tensor<128x128xi1> loc(#loc36)
    tt.store %38, %24#0, %47 {cache = 1 : i32, evict = 1 : i32} : tensor<128x128xf32> loc(#loc39)
    tt.return loc(#loc1)
  } loc(#loc1)
} loc(#loc)
#loc = loc(unknown)
#loc2 = loc("/usr/local/google/home/gflegar/triton-hopper/python/triton/language/standard.py":21:12)
#loc3 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":27:16)
#loc4 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":54:4)
#loc5 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":38:17)
#loc6 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":57:23)
#loc7 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":35:21)
#loc8 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":29:23)
#loc9 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":26:10)
#loc10 = loc("/usr/local/google/home/gflegar/triton-hopper/python/triton/language/standard.py":21:11)
#loc11 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":28:16)
#loc12 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":30:15)
#loc13 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":31:18)
#loc14 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":32:23)
#loc15 = loc("/usr/local/google/home/gflegar/triton-hopper/python/triton/language/core.py":1304:17)
#loc16 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":32:19)
#loc17 = loc("/usr/local/google/home/gflegar/triton-hopper/python/triton/language/core.py":1304:11)
#loc18 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":33:27)
#loc19 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":33:12)
#loc20 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":34:13)
#loc21 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":34:12)
#loc22 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":36:21)
#loc23 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":45:17)
#loc24 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":55:12)
#loc25 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":56:12)
#loc26 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":57:8)
#loc27 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":58:21)
#loc28 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":59:21)
#loc29 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":61:30)
#loc30 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":61:13)
#loc31 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":62:13)
#loc32 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":64:21)
#loc33 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":64:13)
#loc34 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":64:51)
#loc35 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":65:12)
#loc36 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":65:11)
#loc37 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":65:36)
#loc38 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":65:35)
#loc39 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":66:4)
#loc40 = loc(callsite(#loc2 at #loc3))
#loc41 = loc(callsite(#loc10 at #loc3))
#loc42 = loc(callsite(#loc2 at #loc11))
#loc43 = loc(callsite(#loc10 at #loc11))
#loc44 = loc(callsite(#loc15 at #loc16))
#loc45 = loc(callsite(#loc17 at #loc16))
#loc46 = loc(fused[#loc26, #loc6])