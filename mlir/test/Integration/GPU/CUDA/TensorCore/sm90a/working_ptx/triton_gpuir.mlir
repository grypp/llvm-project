#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked4 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc1 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0)
#mma = #triton_gpu.mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0], instrShape = [16, 128, 16]}>
#shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = true}>
#shared2 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = true}>
module attributes {"triton_gpu.compute-capability" = 90 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32} {
  tt.func public @matmul_kernel_0d1d2d3d4d5d6d7c8c9d10d11c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":17:0)) {
    %c6_i32 = arith.constant 6 : i32 loc(#loc2)
    %c320_i32 = arith.constant 320 : i32 loc(#loc2)
    %c5_i32 = arith.constant 5 : i32 loc(#loc3)
    %c256_i32 = arith.constant 256 : i32 loc(#loc2)
    %c4_i32 = arith.constant 4 : i32 loc(#loc3)
    %c192_i32 = arith.constant 192 : i32 loc(#loc2)
    %c3_i32 = arith.constant 3 : i32 loc(#loc3)
    %c128_i32 = arith.constant 128 : i32 loc(#loc4)
    %c2_i32 = arith.constant 2 : i32 loc(#loc3)
    %c64_i32 = arith.constant 64 : i32 loc(#loc5)
    %c1_i32 = arith.constant 1 : i32 loc(#loc2)
    %c7_i32 = arith.constant 7 : i32 loc(#loc5)
    %true = arith.constant true loc(#loc2)
    %false = arith.constant false loc(#loc2)
    %cst = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mma> loc(#loc6)
    %c127_i32 = arith.constant 127 : i32 loc(#loc40)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c1_i64 = arith.constant 1 : i64 loc(#loc2)
    %c8_i32 = arith.constant 8 : i32 loc(#loc9)
    %0 = tt.get_program_id {axis = 0 : i32} : i32 loc(#loc10)
    %1 = arith.addi %arg4, %c127_i32 : i32 loc(#loc40)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc41)
    %3 = arith.addi %arg3, %c127_i32 : i32 loc(#loc42)
    %4 = arith.divsi %3, %c128_i32 : i32 loc(#loc43)
    %5 = arith.muli %2, %c8_i32 : i32 loc(#loc9)
    %6 = arith.divsi %0, %5 : i32 loc(#loc13)
    %7 = arith.muli %6, %c8_i32 : i32 loc(#loc14)
    %8 = arith.subi %4, %7 : i32 loc(#loc15)
    %9 = "triton_gpu.cmpi"(%8, %c8_i32) {predicate = 2 : i64} : (i32, i32) -> i1 loc(#loc44)
    %10 = arith.select %9, %8, %c8_i32 : i32 loc(#loc45)
    %11 = arith.remsi %0, %10 : i32 loc(#loc19)
    %12 = arith.addi %7, %11 : i32 loc(#loc20)
    %13 = arith.remsi %0, %5 : i32 loc(#loc21)
    %14 = arith.divsi %13, %10 : i32 loc(#loc22)
    %15 = arith.muli %12, %c128_i32 : i32 loc(#loc4)
    %16 = arith.muli %14, %c128_i32 : i32 loc(#loc23)
    %17 = arith.extsi %arg3 : i32 to i64 loc(#loc2)
    %18 = arith.extsi %arg5 : i32 to i64 loc(#loc2)
    %19 = arith.extsi %arg6 : i32 to i64 loc(#loc2)
    %20 = tt.make_tensor_ptr %arg0, [%17, %18], [%19, %c1_i64], [%15, %c0_i32] {order = array<i32: 1, 0>} : <tensor<128x64xf16, #blocked>, 1> loc(#loc2)
    %21 = arith.extsi %arg4 : i32 to i64 loc(#loc24)
    %22 = arith.extsi %arg7 : i32 to i64 loc(#loc24)
    %23 = tt.make_tensor_ptr %arg1, [%18, %21], [%c1_i64, %22], [%c0_i32, %16] {order = array<i32: 0, 1>} : <tensor<64x128xf16, #blocked1>, 1> loc(#loc24)
    %24 = triton_gpu.alloc_mbarrier {count = 1 : i32} : tensor<7xi64, #shared> loc(#loc3)
    %25 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc2)
    %26 = triton_gpu.alloc_tensor : tensor<7x128x64xf16, #shared1> loc(#loc3)
    %27 = tt.splat %25 : (i1) -> tensor<128x64xi1, #blocked2> loc(#loc2)
    %28 = triton_gpu.extract_mbarrier %24[%c0_i32] : tensor<7xi64, #shared>, i32 -> <i64, 3> loc(#loc3)
    %29 = triton_gpu.get_thread_id : i32 loc(#loc3)
    %30 = arith.cmpi eq, %29, %c0_i32 : i32 loc(#loc3)
    triton_gpu.mbarrier_arrive %28, %30 {operand_segment_sizes = array<i32: 1, 1, 0>, trackAsyncOp = false, txCount = 32768 : i32} : !tt.ptr<i64, 3>, i1 loc(#loc3)
    %31 = triton_gpu.insert_slice_async_v2 %20, %26, %c0_i32, %28, %27 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x64xf16, #blocked>, 1>, tensor<7x128x64xf16, #shared1>, i32, !tt.ptr<i64, 3>, tensor<128x64xi1, #blocked2> -> tensor<7x128x64xf16, #shared1> loc(#loc3)
    %32 = triton_gpu.alloc_tensor : tensor<7x64x128xf16, #shared2> loc(#loc25)
    %33 = tt.splat %25 : (i1) -> tensor<64x128xi1, #blocked3> loc(#loc2)
    %34 = triton_gpu.insert_slice_async_v2 %23, %32, %c0_i32, %28, %33 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<64x128xf16, #blocked1>, 1>, tensor<7x64x128xf16, #shared2>, i32, !tt.ptr<i64, 3>, tensor<64x128xi1, #blocked3> -> tensor<7x64x128xf16, #shared2> loc(#loc25)
    %35 = tt.advance %20, [%c0_i32, %c64_i32] : <tensor<128x64xf16, #blocked>, 1> loc(#loc26)
    %36 = tt.advance %23, [%c64_i32, %c0_i32] : <tensor<64x128xf16, #blocked1>, 1> loc(#loc27)
    %37 = arith.cmpi sgt, %arg5, %c64_i32 : i32 loc(#loc2)
    %38 = tt.splat %37 : (i1) -> tensor<128x64xi1, #blocked2> loc(#loc2)
    %39 = triton_gpu.extract_mbarrier %24[%c1_i32] : tensor<7xi64, #shared>, i32 -> <i64, 3> loc(#loc3)
    triton_gpu.mbarrier_arrive %39, %30 {operand_segment_sizes = array<i32: 1, 1, 0>, trackAsyncOp = false, txCount = 32768 : i32} : !tt.ptr<i64, 3>, i1 loc(#loc3)
    %40 = triton_gpu.insert_slice_async_v2 %35, %31, %c1_i32, %39, %38 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x64xf16, #blocked>, 1>, tensor<7x128x64xf16, #shared1>, i32, !tt.ptr<i64, 3>, tensor<128x64xi1, #blocked2> -> tensor<7x128x64xf16, #shared1> loc(#loc3)
    %41 = tt.splat %37 : (i1) -> tensor<64x128xi1, #blocked3> loc(#loc2)
    %42 = triton_gpu.insert_slice_async_v2 %36, %34, %c1_i32, %39, %41 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<64x128xf16, #blocked1>, 1>, tensor<7x64x128xf16, #shared2>, i32, !tt.ptr<i64, 3>, tensor<64x128xi1, #blocked3> -> tensor<7x64x128xf16, #shared2> loc(#loc25)
    %43 = tt.advance %35, [%c0_i32, %c64_i32] : <tensor<128x64xf16, #blocked>, 1> loc(#loc26)
    %44 = tt.advance %36, [%c64_i32, %c0_i32] : <tensor<64x128xf16, #blocked1>, 1> loc(#loc27)
    %45 = arith.cmpi sgt, %arg5, %c128_i32 : i32 loc(#loc2)
    %46 = tt.splat %45 : (i1) -> tensor<128x64xi1, #blocked2> loc(#loc2)
    %47 = triton_gpu.extract_mbarrier %24[%c2_i32] : tensor<7xi64, #shared>, i32 -> <i64, 3> loc(#loc3)
    triton_gpu.mbarrier_arrive %47, %30 {operand_segment_sizes = array<i32: 1, 1, 0>, trackAsyncOp = false, txCount = 32768 : i32} : !tt.ptr<i64, 3>, i1 loc(#loc3)
    %48 = triton_gpu.insert_slice_async_v2 %43, %40, %c2_i32, %47, %46 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x64xf16, #blocked>, 1>, tensor<7x128x64xf16, #shared1>, i32, !tt.ptr<i64, 3>, tensor<128x64xi1, #blocked2> -> tensor<7x128x64xf16, #shared1> loc(#loc3)
    %49 = tt.splat %45 : (i1) -> tensor<64x128xi1, #blocked3> loc(#loc2)
    %50 = triton_gpu.insert_slice_async_v2 %44, %42, %c2_i32, %47, %49 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<64x128xf16, #blocked1>, 1>, tensor<7x64x128xf16, #shared2>, i32, !tt.ptr<i64, 3>, tensor<64x128xi1, #blocked3> -> tensor<7x64x128xf16, #shared2> loc(#loc25)
    %51 = tt.advance %43, [%c0_i32, %c64_i32] : <tensor<128x64xf16, #blocked>, 1> loc(#loc26)
    %52 = tt.advance %44, [%c64_i32, %c0_i32] : <tensor<64x128xf16, #blocked1>, 1> loc(#loc27)
    %53 = arith.cmpi sgt, %arg5, %c192_i32 : i32 loc(#loc2)
    %54 = tt.splat %53 : (i1) -> tensor<128x64xi1, #blocked2> loc(#loc2)
    %55 = triton_gpu.extract_mbarrier %24[%c3_i32] : tensor<7xi64, #shared>, i32 -> <i64, 3> loc(#loc3)
    triton_gpu.mbarrier_arrive %55, %30 {operand_segment_sizes = array<i32: 1, 1, 0>, trackAsyncOp = false, txCount = 32768 : i32} : !tt.ptr<i64, 3>, i1 loc(#loc3)
    %56 = triton_gpu.insert_slice_async_v2 %51, %48, %c3_i32, %55, %54 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x64xf16, #blocked>, 1>, tensor<7x128x64xf16, #shared1>, i32, !tt.ptr<i64, 3>, tensor<128x64xi1, #blocked2> -> tensor<7x128x64xf16, #shared1> loc(#loc3)
    %57 = tt.splat %53 : (i1) -> tensor<64x128xi1, #blocked3> loc(#loc2)
    %58 = triton_gpu.insert_slice_async_v2 %52, %50, %c3_i32, %55, %57 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<64x128xf16, #blocked1>, 1>, tensor<7x64x128xf16, #shared2>, i32, !tt.ptr<i64, 3>, tensor<64x128xi1, #blocked3> -> tensor<7x64x128xf16, #shared2> loc(#loc25)
    %59 = tt.advance %51, [%c0_i32, %c64_i32] : <tensor<128x64xf16, #blocked>, 1> loc(#loc26)
    %60 = tt.advance %52, [%c64_i32, %c0_i32] : <tensor<64x128xf16, #blocked1>, 1> loc(#loc27)
    %61 = arith.cmpi sgt, %arg5, %c256_i32 : i32 loc(#loc2)
    %62 = tt.splat %61 : (i1) -> tensor<128x64xi1, #blocked2> loc(#loc2)
    %63 = triton_gpu.extract_mbarrier %24[%c4_i32] : tensor<7xi64, #shared>, i32 -> <i64, 3> loc(#loc3)
    triton_gpu.mbarrier_arrive %63, %30 {operand_segment_sizes = array<i32: 1, 1, 0>, trackAsyncOp = false, txCount = 32768 : i32} : !tt.ptr<i64, 3>, i1 loc(#loc3)
    %64 = triton_gpu.insert_slice_async_v2 %59, %56, %c4_i32, %63, %62 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x64xf16, #blocked>, 1>, tensor<7x128x64xf16, #shared1>, i32, !tt.ptr<i64, 3>, tensor<128x64xi1, #blocked2> -> tensor<7x128x64xf16, #shared1> loc(#loc3)
    %65 = tt.splat %61 : (i1) -> tensor<64x128xi1, #blocked3> loc(#loc2)
    %66 = triton_gpu.insert_slice_async_v2 %60, %58, %c4_i32, %63, %65 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<64x128xf16, #blocked1>, 1>, tensor<7x64x128xf16, #shared2>, i32, !tt.ptr<i64, 3>, tensor<64x128xi1, #blocked3> -> tensor<7x64x128xf16, #shared2> loc(#loc25)
    %67 = tt.advance %59, [%c0_i32, %c64_i32] : <tensor<128x64xf16, #blocked>, 1> loc(#loc26)
    %68 = tt.advance %60, [%c64_i32, %c0_i32] : <tensor<64x128xf16, #blocked1>, 1> loc(#loc27)
    %69 = arith.cmpi sgt, %arg5, %c320_i32 : i32 loc(#loc2)
    %70 = tt.splat %69 : (i1) -> tensor<128x64xi1, #blocked2> loc(#loc2)
    %71 = triton_gpu.extract_mbarrier %24[%c5_i32] : tensor<7xi64, #shared>, i32 -> <i64, 3> loc(#loc3)
    triton_gpu.mbarrier_arrive %71, %30 {operand_segment_sizes = array<i32: 1, 1, 0>, trackAsyncOp = false, txCount = 32768 : i32} : !tt.ptr<i64, 3>, i1 loc(#loc3)
    %72 = triton_gpu.insert_slice_async_v2 %67, %64, %c5_i32, %71, %70 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x64xf16, #blocked>, 1>, tensor<7x128x64xf16, #shared1>, i32, !tt.ptr<i64, 3>, tensor<128x64xi1, #blocked2> -> tensor<7x128x64xf16, #shared1> loc(#loc3)
    %73 = tt.splat %69 : (i1) -> tensor<64x128xi1, #blocked3> loc(#loc2)
    %74 = triton_gpu.insert_slice_async_v2 %68, %66, %c5_i32, %71, %73 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<64x128xf16, #blocked1>, 1>, tensor<7x64x128xf16, #shared2>, i32, !tt.ptr<i64, 3>, tensor<64x128xi1, #blocked3> -> tensor<7x64x128xf16, #shared2> loc(#loc25)
    %75 = triton_gpu.extract_slice %72[0, 0, 0] [1, 128, 64] [1, 1, 1] : tensor<7x128x64xf16, #shared1> to tensor<128x64xf16, #shared1> loc(#loc3)
    %76 = triton_gpu.extract_slice %74[0, 0, 0] [1, 64, 128] [1, 1, 1] : tensor<7x64x128xf16, #shared2> to tensor<64x128xf16, #shared2> loc(#loc25)
    %77:15 = scf.for %arg9 = %c0_i32 to %arg5 step %c64_i32 iter_args(%arg10 = %cst, %arg11 = %20, %arg12 = %23, %arg13 = %72, %arg14 = %74, %arg15 = %75, %arg16 = %76, %arg17 = %67, %arg18 = %68, %arg19 = %c320_i32, %arg20 = %c6_i32, %arg21 = %c0_i32, %arg22 = %c0_i32, %arg23 = %false, %arg24 = %true) -> (tensor<128x128xf32, #mma>, !tt.ptr<tensor<128x64xf16, #blocked>, 1>, !tt.ptr<tensor<64x128xf16, #blocked1>, 1>, tensor<7x128x64xf16, #shared1>, tensor<7x64x128xf16, #shared2>, tensor<128x64xf16, #shared1>, tensor<64x128xf16, #shared2>, !tt.ptr<tensor<128x64xf16, #blocked>, 1>, !tt.ptr<tensor<64x128xf16, #blocked1>, 1>, i32, i32, i32, i32, i1, i1)  : i32 {
      %103 = triton_gpu.extract_mbarrier %24[%arg22] : tensor<7xi64, #shared>, i32 -> <i64, 3> loc(#loc3)
      triton_gpu.mbarrier_wait %103, %arg23 : <i64, 3> loc(#loc3)
      %104 = triton_gpu.dot_async %arg15, %arg16, %arg10 {allowTF32 = true} : tensor<128x64xf16, #shared1> * tensor<64x128xf16, #shared2> -> tensor<128x128xf32, #mma> loc(#loc46)
      triton_gpu.dot_wait {pendings = 1 : i32} loc(#loc46)
      %105 = tt.advance %arg11, [%c0_i32, %c64_i32] : <tensor<128x64xf16, #blocked>, 1> loc(#loc26)
      %106 = tt.advance %arg12, [%c64_i32, %c0_i32] : <tensor<64x128xf16, #blocked1>, 1> loc(#loc27)
      %107 = arith.addi %arg22, %c1_i32 : i32 loc(#loc5)
      %108 = arith.cmpi uge, %107, %c7_i32 : i32 loc(#loc5)
      %109 = arith.select %108, %c0_i32, %107 : i32 loc(#loc5)
      %110 = scf.if %108 -> (i1) {
        %126 = arith.xori %arg23, %true : i1 loc(#loc5)
        scf.yield %126 : i1 loc(#loc5)
      } else {
        scf.yield %arg23 : i1 loc(#loc5)
      } loc(#loc5)
      %111 = arith.addi %arg19, %c64_i32 : i32 loc(#loc5)
      %112 = arith.cmpi slt, %111, %arg5 : i32 loc(#loc5)
      %113 = arith.addi %arg21, %c1_i32 : i32 loc(#loc5)
      %114 = tt.advance %arg17, [%c0_i32, %c64_i32] : <tensor<128x64xf16, #blocked>, 1> loc(#loc26)
      %115 = tt.advance %arg18, [%c64_i32, %c0_i32] : <tensor<64x128xf16, #blocked1>, 1> loc(#loc27)
      %116 = triton_gpu.extract_mbarrier %24[%arg20] : tensor<7xi64, #shared>, i32 -> <i64, 3> loc(#loc3)
      %117 = arith.andi %30, %112 : i1 loc(#loc3)
      triton_gpu.mbarrier_arrive %116, %117 {operand_segment_sizes = array<i32: 1, 1, 0>, trackAsyncOp = false, txCount = 32768 : i32} : !tt.ptr<i64, 3>, i1 loc(#loc3)
      %118 = triton_gpu.insert_slice_async_v2 %114, %arg13, %arg20, %116, %112 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<128x64xf16, #blocked>, 1>, tensor<7x128x64xf16, #shared1>, i32, !tt.ptr<i64, 3>, i1 -> tensor<7x128x64xf16, #shared1> loc(#loc3)
      %119 = triton_gpu.extract_slice %118[%109, 0, 0] [1, 128, 64] [1, 1, 1] : tensor<7x128x64xf16, #shared1> to tensor<128x64xf16, #shared1> loc(#loc3)
      %120 = triton_gpu.insert_slice_async_v2 %115, %arg14, %arg20, %116, %112 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operand_segment_sizes = array<i32: 1, 1, 1, 1, 1, 0>} : !tt.ptr<tensor<64x128xf16, #blocked1>, 1>, tensor<7x64x128xf16, #shared2>, i32, !tt.ptr<i64, 3>, i1 -> tensor<7x64x128xf16, #shared2> loc(#loc25)
      %121 = triton_gpu.extract_slice %120[%109, 0, 0] [1, 64, 128] [1, 1, 1] : tensor<7x64x128xf16, #shared2> to tensor<64x128xf16, #shared2> loc(#loc25)
      %122 = arith.addi %arg20, %c1_i32 : i32 loc(#loc5)
      %123 = arith.cmpi uge, %122, %c7_i32 : i32 loc(#loc5)
      %124 = arith.select %123, %c0_i32, %122 : i32 loc(#loc5)
      %125 = scf.if %123 -> (i1) {
        %126 = arith.xori %arg24, %true : i1 loc(#loc5)
        scf.yield %126 : i1 loc(#loc5)
      } else {
        scf.yield %arg24 : i1 loc(#loc5)
      } loc(#loc5)
      scf.yield %104, %105, %106, %118, %120, %119, %121, %114, %115, %111, %124, %113, %109, %110, %125 : tensor<128x128xf32, #mma>, !tt.ptr<tensor<128x64xf16, #blocked>, 1>, !tt.ptr<tensor<64x128xf16, #blocked1>, 1>, tensor<7x128x64xf16, #shared1>, tensor<7x64x128xf16, #shared2>, tensor<128x64xf16, #shared1>, tensor<64x128xf16, #shared2>, !tt.ptr<tensor<128x64xf16, #blocked>, 1>, !tt.ptr<tensor<64x128xf16, #blocked1>, 1>, i32, i32, i32, i32, i1, i1 loc(#loc5)
    } loc(#loc5)
    scf.if %25 {
      triton_gpu.dot_wait {pendings = 0 : i32} loc(#loc5)
    } loc(#loc46)
    %78 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>> loc(#loc29)
    %79 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc29)
    %80 = tt.splat %15 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc30)
    %81 = arith.addi %80, %79 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc30)
    %82 = tt.splat %16 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>> loc(#loc31)
    %83 = arith.addi %82, %78 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>> loc(#loc31)
    %84 = tt.expand_dims %81 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>>) -> tensor<128x1xi32, #blocked4> loc(#loc32)
    %85 = tt.splat %arg8 : (i32) -> tensor<128x1xi32, #blocked4> loc(#loc32)
    %86 = arith.muli %84, %85 : tensor<128x1xi32, #blocked4> loc(#loc32)
    %87 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<128x1x!tt.ptr<f32, 1>, #blocked4> loc(#loc33)
    %88 = tt.addptr %87, %86 : tensor<128x1x!tt.ptr<f32, 1>, #blocked4>, tensor<128x1xi32, #blocked4> loc(#loc33)
    %89 = tt.expand_dims %83 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>>) -> tensor<1x128xi32, #blocked4> loc(#loc34)
    %90 = tt.broadcast %88 : (tensor<128x1x!tt.ptr<f32, 1>, #blocked4>) -> tensor<128x128x!tt.ptr<f32, 1>, #blocked4> loc(#loc33)
    %91 = tt.broadcast %89 : (tensor<1x128xi32, #blocked4>) -> tensor<128x128xi32, #blocked4> loc(#loc33)
    %92 = tt.addptr %90, %91 : tensor<128x128x!tt.ptr<f32, 1>, #blocked4>, tensor<128x128xi32, #blocked4> loc(#loc33)
    %93 = tt.splat %arg3 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc35)
    %94 = "triton_gpu.cmpi"(%81, %93) {predicate = 2 : i64} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>>, tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>>) -> tensor<128xi1, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc35)
    %95 = tt.expand_dims %94 {axis = 1 : i32} : (tensor<128xi1, #triton_gpu.slice<{dim = 1, parent = #blocked4}>>) -> tensor<128x1xi1, #blocked4> loc(#loc36)
    %96 = tt.splat %arg4 : (i32) -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>> loc(#loc37)
    %97 = "triton_gpu.cmpi"(%83, %96) {predicate = 2 : i64} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>>, tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>>) -> tensor<128xi1, #triton_gpu.slice<{dim = 0, parent = #blocked4}>> loc(#loc37)
    %98 = tt.expand_dims %97 {axis = 0 : i32} : (tensor<128xi1, #triton_gpu.slice<{dim = 0, parent = #blocked4}>>) -> tensor<1x128xi1, #blocked4> loc(#loc38)
    %99 = tt.broadcast %95 : (tensor<128x1xi1, #blocked4>) -> tensor<128x128xi1, #blocked4> loc(#loc36)
    %100 = tt.broadcast %98 : (tensor<1x128xi1, #blocked4>) -> tensor<128x128xi1, #blocked4> loc(#loc36)
    %101 = arith.andi %99, %100 : tensor<128x128xi1, #blocked4> loc(#loc36)
    %102 = triton_gpu.convert_layout %77#0 : (tensor<128x128xf32, #mma>) -> tensor<128x128xf32, #blocked4> loc(#loc39)
    tt.store %92, %102, %101 {cache = 1 : i32, evict = 1 : i32} : tensor<128x128xf32, #blocked4> loc(#loc39)
    tt.return loc(#loc1)
  } loc(#loc1)
} loc(#loc)
#loc = loc(unknown)
#loc2 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":38:17)
#loc3 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":55:12)
#loc4 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":35:21)
#loc5 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":54:4)
#loc6 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":57:23)
#loc7 = loc("/usr/local/google/home/gflegar/triton-hopper/python/triton/language/standard.py":21:12)
#loc8 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":27:16)
#loc9 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":29:23)
#loc10 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":26:10)
#loc11 = loc("/usr/local/google/home/gflegar/triton-hopper/python/triton/language/standard.py":21:11)
#loc12 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":28:16)
#loc13 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":30:15)
#loc14 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":31:18)
#loc15 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":32:23)
#loc16 = loc("/usr/local/google/home/gflegar/triton-hopper/python/triton/language/core.py":1304:17)
#loc17 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":32:19)
#loc18 = loc("/usr/local/google/home/gflegar/triton-hopper/python/triton/language/core.py":1304:11)
#loc19 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":33:27)
#loc20 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":33:12)
#loc21 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":34:13)
#loc22 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":34:12)
#loc23 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":36:21)
#loc24 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":45:17)
#loc25 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":56:12)
#loc26 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":58:21)
#loc27 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":59:21)
#loc28 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":57:8)
#loc29 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":61:30)
#loc30 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":61:13)
#loc31 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":62:13)
#loc32 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":64:21)
#loc33 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":64:13)
#loc34 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":64:51)
#loc35 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":65:12)
#loc36 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":65:11)
#loc37 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":65:36)
#loc38 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":65:35)
#loc39 = loc("/usr/local/google/home/gflegar/triton-hopper/python/tutorials/09-tma-matrix-multiplication.py":66:4)
#loc40 = loc(callsite(#loc7 at #loc8))
#loc41 = loc(callsite(#loc11 at #loc8))
#loc42 = loc(callsite(#loc7 at #loc12))
#loc43 = loc(callsite(#loc11 at #loc12))
#loc44 = loc(callsite(#loc16 at #loc17))
#loc45 = loc(callsite(#loc18 at #loc17))
#loc46 = loc(fused[#loc28, #loc6])